# Stage 1: Build environment
FROM python:3.11-slim-buster AS build

# Install dependencies to system without creaeting venv.
ENV PYTHONUNBUFFERED=1 \
    POETRY_VIRTUALENVS_CREATE=false \
    DATABASE_URL=sqlite:///db.sqlite3 \
    DEBUG=0

WORKDIR /app

# Install poetry.
RUN pip install poetry

# Install dependencies to system /usr/local/lib/python3.11/site-packages
COPY pyproject.toml poetry.lock ./
RUN poetry install --without dev

# Install Node.js and NPM
RUN apt-get update && apt-get install -y curl && \
    curl -sL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs

COPY ./tailwind ./

# Install Tailwind CSS and compile the styles
RUN npm i && \
    npm run build:docker:css

# RUN python manage.py collectstatic
COPY . .
RUN mv output.css ./static/css/output.css
RUN python manage.py collectstatic --no-input --no-default-ignore

# Stage 2: Production environment
FROM python:3.11-slim-buster

# Set working directory
WORKDIR /app

# /usr/local/lib/python3.11/site-packages
COPY --from=build /app/crais /app/crais
COPY --from=build /app/manage.py /app/manage.py
COPY --from=build /app/templates /app/templates
COPY --from=build /app/staticfiles /app/staticfiles

COPY --from=build /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=build /usr/local/bin/ /usr/local/bin/

RUN python manage.py migrate

EXPOSE 8000

# Define the command to run the Django application
# CMD ["gunicorn", "crais.wsgi:application", "--bind", "0.0.0.0:8000"]
